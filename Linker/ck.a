;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/22/2023
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index = 0;
;unsigned char rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;int LED[8];
; //NGAT NGOAI
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 004B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004C DDRB=0X00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 004D DDRC=0X00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004E }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0050 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0051 
; 0000 0052 DDRB=0XFF;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0053 DDRC=0XFF;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0054 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;//
;
; void uart_char_send(unsigned char chr){
; 0000 0057 void uart_char_send(unsigned char chr){
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0058     while (!(UCSRA & (1<<UDRE))) {}; //Wait for empty transmit buffer - UDRE=1
;	chr -> Y+0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0059             UDR=chr;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005A }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;//Send a string to the USART
;void uart_string_send(unsigned char *txt){
; 0000 005C void uart_string_send(unsigned char *txt){
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005D     unsigned char n, i;
; 0000 005E     n=strlen(txt); // Count the number of characters
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;	*txt -> Y+2
;	n -> R17
;	i -> R16
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 005F           for (i=0; i<n; i++){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0060             uart_char_send(txt[i]); //Send data
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0061             }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0062 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 006A {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006B char status,data;
; 0000 006C status=UCSRA;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006D data=UDR;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 006E 
; 0000 006F rx_buffer[rx_wr_index]=data;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0070 rx_wr_index += 1;
;PCODE: $0000005A VOL: 0
; 0000 0071 if (data == '?') rx_wr_index=0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0072    // xu ly
; 0000 0073 
; 0000 0074    if(strcmp(rx_buffer, "a0?") == 0)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0075    {
; 0000 0076      PORTB.0 = 1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0077    }
; 0000 0078    else if(strcmp(rx_buffer, "a1?") == 0)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0079    {
; 0000 007A      PORTB.0 = 0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 007B    }
; 0000 007C    else if(strcmp(rx_buffer, "b0?") == 0)
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007D    {
; 0000 007E       PORTB.1=1;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 007F    }
; 0000 0080    if(strcmp(rx_buffer, "b1?") == 0)
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0081    {
; 0000 0082      PORTB.1 = 0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0083    }
; 0000 0084    else if(strcmp(rx_buffer, "c0?") == 0)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0085    {
; 0000 0086      PORTB.2=1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0087    }
; 0000 0088    else if(strcmp(rx_buffer, "c1?") == 0)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0089    {
; 0000 008A      PORTB.2 = 0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 008B    }
; 0000 008C    else if(strcmp(rx_buffer, "d0?") == 0)
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 008D    {
; 0000 008E      PORTB.3=1;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 008F    }
; 0000 0090    else if(strcmp(rx_buffer, "d1?") == 0)
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0091    {
; 0000 0092      PORTB.3 = 0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0093    }
; 0000 0094    else if(strcmp(rx_buffer, "e0?") == 0)
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0095    {
; 0000 0096      PORTB.4=1;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0097    }
; 0000 0098    else if(strcmp(rx_buffer, "e1?") == 0)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0099    {
; 0000 009A      PORTB.4=0;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009B    }
; 0000 009C    else if(strcmp(rx_buffer, "f0?") == 0)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 009D    {
; 0000 009E      PORTB.5=1;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 009F    }
; 0000 00A0    else if(strcmp(rx_buffer, "f1?") == 0)
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00A1    {
; 0000 00A2      PORTB.5 =1;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00A3    }
; 0000 00A4    else if(strcmp(rx_buffer, "g0?") == 0)
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A5    {
; 0000 00A6      PORTB.6 = 1;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00A7    }
; 0000 00A8    else if(strcmp(rx_buffer, "g1?") == 0)
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00A9    {
; 0000 00AA      PORTB.6 = 0;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00AB    }
; 0000 00AC    else if(strcmp(rx_buffer, "h0?") == 0)
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00AD    {
; 0000 00AE      PORTB.7 =  1;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00AF    }
; 0000 00B0    else if(strcmp(rx_buffer, "h1?") == 0)
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00B1    {
; 0000 00B2      PORTB.7 = 0;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B3    }
; 0000 00B4  else if(strcmp(rx_buffer, "sp?") == 0)
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00B5    {
; 0000 00B6      DDRB=0X00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00B7      DDRC=0X00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00B8    }
; 0000 00B9    else if(strcmp(rx_buffer, "st?") == 0)
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00BA    {
; 0000 00BB     DDRB=0Xff;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00BC     DDRC=0Xff;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00BD    }
; 0000 00BE 
; 0000 00BF }
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0

	.DSEG
_0xB:
	.BYTE 0x48
;
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00C7 {

	.CSEG
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00C8 char data;
; 0000 00C9 while (rx_counter==0);
;PCODE: $00000150 VOL: 0
;	data -> R17
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00CA data=rx_buffer[rx_rd_index++];
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00CB #if RX_BUFFER_SIZE != 256
; 0000 00CC if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00CD #endif
; 0000 00CE #asm("cli")
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
	cli
;PCODE: $00000161 VOL: 0
; 0000 00CF --rx_counter;
;PCODE: $00000162 VOL: 0
; 0000 00D0 #asm("sei")
;PCODE: $00000163 VOL: 0
	sei
;PCODE: $00000164 VOL: 0
; 0000 00D1 return data;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00D2 }
;PCODE: $00000168 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define ADC_VREF_TYPE 0xE0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 00DD {
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00DE ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00DF // Delay needed for the stabilization of the ADC input voltage
; 0000 00E0 delay_us(10);
;PCODE: $0000016E VOL: 0
; 0000 00E1 // Start the AD conversion
; 0000 00E2 ADCSRA|=0x40;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00E3 // Wait for the AD conversion to complete
; 0000 00E4 while ((ADCSRA & 0x10)==0);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00E5 ADCSRA|=0x10;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00E6 return ADCH;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00E7 }
;PCODE: $0000017D VOL: 0
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00EA {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00EB PORTC.1=~PORTC.1;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00EC TCNT1H=0X85;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00ED TCNT1L=0XED;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00EE }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;
;//
;unsigned int ADC_val;
;unsigned char str[10];
;
;//////////////////////////////////////////////////
;void main(void)
; 0000 00F6 {
;PCODE: $00000191 VOL: 0
; 0000 00F7 DDRB = 0x00;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00F8 DDRC=0X00;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00F9 //Extenal Interrupt
; 0000 00FA GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00FB MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00FC MCUCSR=(0<<ISC2);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00FD GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00FE 
; 0000 00FF //Timer
; 0000 0100 TCCR1B=0x04;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0101 TIMSK=0X04;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0102 TCNT1H=0X85;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0103 TCNT1L=0XED;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0104 // USART initialization
; 0000 0105 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0106 // USART Receiver: On
; 0000 0107 // USART Transmitter: On
; 0000 0108 // USART Mode: Asynchronous
; 0000 0109 // USART Baud Rate: 9600
; 0000 010A UCSRA=0x00;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 010B UCSRB=0x98;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 010C UCSRC=0x86;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 010D UBRRH=0x00;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 010E UBRRL=0x33;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 010F 
; 0000 0110 // Analog Comparator initialization
; 0000 0111 // Analog Comparator: Off
; 0000 0112 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0113 ACSR=0x80;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0114 SFIOR=0x00;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0115 
; 0000 0116 // ADC initialization
; 0000 0117 // ADC Clock frequency: 1000.000 kHz
; 0000 0118 // ADC Voltage Reference: AREF pin
; 0000 0119 // ADC Auto Trigger Source: ADC Stopped
; 0000 011A ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 011B ADCSRA=0x83;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 011C 
; 0000 011D // Global enable interrupts
; 0000 011E #asm("sei")
;PCODE: $000001B9 VOL: 0
	sei
;PCODE: $000001BA VOL: 0
; 0000 011F 
; 0000 0120 while (1)
;PCODE: $000001BB VOL: 0
; 0000 0121       {
; 0000 0122       ADC_val = read_adc(1);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0123       sprintf(str, "%u\n", ADC_val);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0124       uart_string_send(str);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0125       delay_ms(1000);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0126       }
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0127 }
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
